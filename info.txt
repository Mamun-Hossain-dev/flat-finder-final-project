import { NextRequest, NextResponse } from "next/server";
import dbConnect from "@/lib/dbConnect";
import TemporaryListing from "@/models/TemporaryListing";
import FlatListing from "@/models/FlatListing";
import User from "@/models/User";
import { verifyToken } from "@/lib/auth-cookies";

export async function PATCH(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  await dbConnect();

  try {
    const token = request.cookies.get("auth-token")?.value;
    const decodedToken = await verifyToken(token);

    if (!decodedToken || !decodedToken.firebaseUid) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const user = await User.findOne({ firebaseUid: decodedToken.firebaseUid });

    if (!user || user.role !== "admin") {
      return NextResponse.json({ error: "Forbidden" }, { status: 403 });
    }

    // Await the params promise
    const resolvedParams = await params;
    const id = resolvedParams.id;

    if (!id) {
      return NextResponse.json(
        { error: "Temporary listing ID is required" },
        { status: 400 }
      );
    }

    const temporaryListing = await TemporaryListing.findById(id);

    if (!temporaryListing) {
      return NextResponse.json(
        { error: "Temporary listing not found" },
        { status: 404 }
      );
    }

    // Create the permanent listing from the temporary one
    const listingData = temporaryListing.toObject();
    delete listingData._id; // Remove the _id so Mongoose generates a new one
    delete listingData.__v; // Remove version key

    const permanentListing = await FlatListing.create({
      ...listingData,
      isApproved: true, // Set to true upon admin approval
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    // Delete the temporary listing
    await TemporaryListing.findByIdAndDelete(id);

    return NextResponse.json({
      message: "Listing approved and moved to permanent listings",
      listing: permanentListing,
    });
  } catch (error) {
    console.error("Error approving temporary listing:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}The error is related to Next.js 15's new type checking for route handlers. The issue is with the params parameter type definition. Here's the fix:Fixed Route Handler - approve/route.tsCodeÂ import { NextRequest, NextResponse } from "next/server";
import dbConnect from "@/lib/dbConnect";
import TemporaryListing from "@/models/TemporaryListing";
import FlatListing from "@/models/FlatListing";
import User from "@/models/User";
import { verKey Changes Made:

Fixed params type: Changed from { params: { id: string } } to { params: Promise<{ id: string }> }
Added await for params: const resolvedParams = await params;
Updated id extraction: const id = resolvedParams.id;
Removed the explicit cast: No need for (params as any).id

Additional Fix for the Logout Route:
You also have a warning about unused request parameter in ./app/api/auth/logout/route.ts. Here's how to fix that:
Option 1: If you don't need the request parameter, prefix it with underscore:
typescriptexport async function POST(_request: NextRequest) {
  // your logout logic
}
Option 2: If you do use the request parameter, make sure you're actually using it in your code.
Next.js 15 Route Handler Changes:
In Next.js 15, all dynamic route parameters are now provided as Promises to support async operations. This is why you need to:

Type params as Promise<{ id: string }>
Await the params before accessing the values

After making these changes, run npm run build again and the TypeScript errors should be resolved.