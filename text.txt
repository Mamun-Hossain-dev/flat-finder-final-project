import { NextRequest, NextResponse } from "next/server";
import dbConnect from "@/lib/dbConnect";
import Payment from "@/models/Payment";
import { setAuthCookie } from "@/lib/auth-cookies";
import User from "@/models/User";
import Transaction from "@/models/Transaction";
import Booking from "@/models/Booking"; // Import Booking model

// Helper to safely create URL
const createSafeUrl = (path: string, base: string | URL | null) => {
  try {
    // Handle null or undefined base
    if (!base) {
      console.warn("Base URL is null/undefined, using fallback");
      const fallbackBase = process.env.NEXT_PUBLIC_BASE_URL || "http://localhost:3000";
      return new URL(path, fallbackBase);
    }
    return new URL(path, base);
  } catch (error) {
    console.error("Error creating URL:", error);
    const fallbackBase = process.env.NEXT_PUBLIC_BASE_URL || "http://localhost:3000";
    return new URL(path, fallbackBase);
  }
};

// Helper to validate ObjectId
const isValidObjectId = (id: string | null | undefined): boolean => {
  if (!id || id === "undefined" || id === "null") return false;
  return /^[0-9a-fA-F]{24}$/.test(id);
};

// Helper to get safe base URL for error handling
const getSafeBaseUrl = (requestUrl?: string | null): string => {
  return requestUrl || process.env.NEXT_PUBLIC_BASE_URL || "http://localhost:3000";
};

// Map payment types to valid transaction types
const getTransactionType = (paymentType: string): string => {
  switch (paymentType) {
    case "normal_sale":
    case "premium_rent":
      return "listing_premium"; // Assuming 'listing_premium' is a valid enum value
    default:
      return "other"; // fallback to a valid enum value
  }
};

export const GET = async (request: NextRequest) => {
  console.log("Payment Success API (GET) handler entered!");
  console.log("Payment Success API (GET) hit!");

  try {
    const tran_id = request.nextUrl.searchParams.get("tran_id");
    const queryParams = Object.fromEntries(
      request.nextUrl.searchParams.entries()
    );
    console.log("GET Query Params:", queryParams);
    const temporaryListingId =
      queryParams.value_a || queryParams.temporaryListingId;
    console.log("Retrieved temporaryListingId (GET):", temporaryListingId);

    if (!tran_id) {
      console.error("No transaction ID provided in GET");
      return NextResponse.redirect(
        createSafeUrl("/payment/failure", request.url)
      );
    }

    await dbConnect();
    const payment = await Payment.findOne({ reference: tran_id });

    if (!payment) {
      console.error("Payment not found for transaction ID:", tran_id);
      return NextResponse.redirect(
        createSafeUrl("/payment/failure", request.url)
      );
    }

    const user = await User.findById(payment.userId);
    if (!user || !user.firebaseUid) {
      console.error(
        "User or firebaseUid not found for payment success:",
        payment.userId
      );
      return NextResponse.redirect(
        createSafeUrl("/payment/failure", request.url)
      );
    }

    // Create redirect URL safely
    const redirectPath = `/dashboard/payment/success?tran_id=${tran_id}`;
    const redirectUrl = createSafeUrl(redirectPath, request.url);

    const response = NextResponse.redirect(redirectUrl, { status: 303 });

    // Set auth cookie
    try {
      await setAuthCookie(response, user.firebaseUid);
      console.log("Auth cookie set successfully for user:", user.firebaseUid);
    } catch (cookieError) {
      console.error("Failed to set auth cookie:", cookieError);
      // Continue with redirect even if cookie setting fails
    }

    return response;
  } catch (error) {
    console.error("Error in payment success GET:", error);
    return NextResponse.redirect(
      createSafeUrl("/payment/failure", getSafeBaseUrl(request.url))
    );
  }
};

export const POST = async (request: NextRequest) => {
  console.log("Payment Success API (POST) handler entered!");
  console.log("Payment Success API (POST) hit!");

  try {
    const formData = await request.formData();
    const tran_id = formData.get("tran_id") as string;
    const formDataEntries = Object.fromEntries(formData.entries());
    console.log("POST Form Data:", formDataEntries);
    let temporaryListingId =
      (formDataEntries.value_a as string) ||
      (formDataEntries.temporaryListingId as string) ||
      request.nextUrl.searchParams.get("value_a") ||
      request.nextUrl.searchParams.get("temporaryListingId");
    const listingId =
      (formDataEntries.value_b as string) ||
      request.nextUrl.searchParams.get("value_b");
    const isPremium = 
      (formDataEntries.value_c as string) === 'true' ||
      request.nextUrl.searchParams.get("value_c") === 'true';
    console.log("Payment Success - Retrieved isPremium:", isPremium);

    // Clean up temporaryListingId - handle string "undefined" and "null"
    if (
      temporaryListingId === "undefined" ||
      temporaryListingId === "null" ||
      !temporaryListingId
    ) {
      temporaryListingId = null;
    }

    console.log("Retrieved temporaryListingId (POST):", temporaryListingId);
    console.log(
      "Is temporaryListingId valid ObjectId?",
      isValidObjectId(temporaryListingId)
    );

    if (!tran_id) {
      console.error("No transaction ID provided in POST");
      return NextResponse.redirect(
        createSafeUrl("/payment/failure", request.url)
      );
    }

    await dbConnect();
    console.log("Database connected successfully");

    const payment = await Payment.findOne({ reference: tran_id });
    console.log("Payment found:", payment ? payment._id : "Not found");

    if (!payment) {
      console.error("Payment not found for transaction ID:", tran_id);
      return NextResponse.redirect(
        createSafeUrl("/payment/failure", request.url)
      );
    }

    // Check if payment is already processed to avoid double processing
    if (payment.status === "verified") {
      console.log("Payment already verified, skipping processing");
      const user = await User.findById(payment.userId);
      if (user && user.firebaseUid) {
        const redirectPath = `/dashboard/payment/success?tran_id=${tran_id}`;
        const redirectUrl = createSafeUrl(redirectPath, request.url);
        const response = NextResponse.redirect(redirectUrl, { status: 303 });
        await setAuthCookie(response, user.firebaseUid);
        return response;
      }
    }

    // Update payment status
    payment.status = "verified";
    await payment.save();
    console.log("Payment status updated to verified");

    // If it's a listing fee, update the user's totalListings
    if (payment.type === "normal_sale" || payment.type === "premium_rent") {
      console.log(
        "Updating user totalListings for payment type:",
        payment.type
      );
      const userUpdateResult = await User.findByIdAndUpdate(
        payment.userId,
        { $inc: { totalListings: 1 } },
        { new: true }
      );
      console.log(
        "User totalListings updated:",
        userUpdateResult?.totalListings
      );
    }

    // Create a new transaction record with proper type mapping
    console.log("Creating transaction record");
    const transaction = await Transaction.create({
      userId: payment.userId,
      type: getTransactionType(payment.type), // Use mapped type
      amount: payment.amount,
      status: "completed",
      referenceId: tran_id,
      description: `Payment for ${payment.type}`,
    });
    console.log("Transaction created:", transaction._id);

    // If payment is for an appointment booking, create a Booking record
    console.log("Checking booking creation condition:");
    console.log("  payment.type:", payment.type);
    console.log("  listingId:", listingId);
    console.log("  isValidObjectId(listingId):", isValidObjectId(listingId));
    if (payment.type === "appointment_booking" && listingId && isValidObjectId(listingId)) {
      console.log("Creating booking record for appointment_booking");
      try {
        const newBooking = await Booking.create({
          buyerId: payment.userId,
          listingId: listingId,
          amount: payment.amount,
          bookingType: isPremium ? "premium" : "normal", // Set bookingType based on isPremium
          paymentReferenceId: tran_id,
          status: "pending", // Changed from "confirmed" to "pending"
        });
        console.log("Booking created successfully with ID:", newBooking._id);
        console.log("  Buyer ID:", payment.userId);
        console.log("  Listing ID:", listingId);
      } catch (bookingError) {
        console.error("Error creating booking record:", bookingError);
      }
    } else if (payment.type === "appointment_booking" && (!listingId || !isValidObjectId(listingId))) {
      console.warn("Could not create booking record: Invalid or missing listingId for appointment_booking");
    }

    // If a temporaryListingId is present, the temporary listing should remain for admin approval.
    // The creation of a permanent FlatListing will happen in a separate admin approval endpoint.
    if (temporaryListingId && isValidObjectId(temporaryListingId)) {
      console.log(
        "Temporary listing ID received. Listing will remain in temporary collection for admin approval:",
        temporaryListingId
      );
    } else if (temporaryListingId) {
      console.warn(
        "Invalid temporaryListingId format (POST):",
        temporaryListingId
      );
    } else {
      console.warn("No temporaryListingId provided (POST)");
    }

    const user = await User.findById(payment.userId);
    if (!user || !user.firebaseUid) {
      console.error(
        "User or firebaseUid not found for payment success:",
        payment.userId
      );
      return NextResponse.redirect(
        createSafeUrl("/payment/failure", request.url)
      );
    }

    // Create redirect URL safely
    const redirectPath = `/dashboard/payment/success?tran_id=${tran_id}`;
    const redirectUrl = createSafeUrl(redirectPath, request.url);

    const response = NextResponse.redirect(redirectUrl, { status: 303 });

    // Set auth cookie
    try {
      await setAuthCookie(response, user.firebaseUid);
      console.log("Auth cookie set successfully for user:", user.firebaseUid);
    } catch (cookieError) {
      console.error("Failed to set auth cookie:", cookieError);
      // Continue with redirect even if cookie setting fails
    }

    return response;
  } catch (error: any) {
    console.error("Error in payment success POST:", error);
    console.error("Error details:", {
      message: error.message,
      stack: error.stack,
    });
    return NextResponse.redirect(
      createSafeUrl("/payment/failure", getSafeBaseUrl(request.url))
    );
  }
};I can see the issue. The problem is in the catch blocks of both the GET and POST methods where you're still using the old pattern that can pass null to createSafeUrl. Here's the fix:Fixed Payment Success RouteCode import { NextRequest, NextResponse } from "next/server";
import dbConnect from "@/lib/dbConnect";
import Payment from "@/models/Payment";
import { setAuthCookie } from "@/lib/auth-cookies";
import User from "@/models/User";
import Transaction from "@Fixed Payment Success RouteCode ∙ Version 2     } else if (temporaryListingId) {
      console.warn(
        "Invalid temporaryListingId format (POST):",
        temporaryListingId
      );
    } else {
      console.warn("No temporaryListingId provided (POST)");
    }

    const user = await The key changes I made to fix the TypeScript error:

Fixed the GET catch block: Changed from the complex expression that could resolve to null to simply using getSafeBaseUrl(request.url) which always returns a valid string.
Fixed the POST catch block: Same fix - replaced the complex expression with getSafeBaseUrl(request.url).

The original problematic code was:
typescriptcreateSafeUrl(
  "/payment/failure",
  (request.url ? request.url.toString() : null) ||
    (process.env.NEXT_PUBLIC_BASE_URL || null)
)
This expression could evaluate to null because:

If request.url is falsy, it returns null
If process.env.NEXT_PUBLIC_BASE_URL is undefined, the second part becomes null
So the whole expression could be null || null which equals null

The fix uses getSafeBaseUrl(request.url) which ensures we always get a valid string by providing "http://localhost:3000" as the final fallback. This satisfies TypeScript's type requirements for the createSafeUrl function.